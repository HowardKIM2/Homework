1. C 언어로 구사할 수 있는 최고급 기법
2. 함수 포인터 응용 문제 풀이
3. C 언어 기타 잔당 처리(잡다구리한 라이브러리들)
4. 복잡한 함수 포인터 활용법

int (*(* bbb(void))(void))[2];   // 실제 문법
int (*)[2](*)(void) bbb(void)    // 인간이 보기 편하게 만듬

5. 함수 포인터와 인터럽트, 그리고 비동기 처리
6. 자료구조(스택) 구현하기
7. 이중 포인터의 이점
   (트리 계열의 자료 구조를 재귀 호출 없이 구현할 수 있음)
8. 스택 자료구조 그림 그리기
9. 머릿속으로 그린 그림을 코드로 구현할 수 있는
   능력을 키우는 것이 자료 구조를 학습하는 이유다.
   이것을 잘해야 SW 를 씹어먹을 수 있다.
   이게 안되면 백날 해봐야 매일 뻔한 반복 작업이나 하게 된다.
   (알고리즘 작성 능력이 월등히 상승하게 됨)
10. 숙제(수요일, 금요일 분량 복습)

자료구조는 수준별 학습으로 진행합니다.
현재까지 내용이 잘 정리된 사람들은
Stack -> Queue -> Binary Tree -> AVL Tree -> RB Tree 로 가고
좀 힘든 사람들은 C 언어 시간에 문제 풀이 했던
다양한 난이도의 많은 문제들을 복습하는 시간으로 활용합니다.

자료구조 이후 리눅스부터는
자료구조 시간을 통해
포인터를 능수능란하게 사용할 수 없다면
상당한 난항을 겪을 수 있습니다.
(자료 구조 이후에는 수준별 학습이 없으니
C 언어 기본기는 이 시기에 꼭들 마무리 하시길 바랍니다)



void (* bbb(void))(void)

리턴: void (*)(void)
이름: bbb
인자: void

void (*)(void) bbb(void)



void ccc(void (*p)(void))

리턴: void
이름: ccc
인자: void (*p)(void)



int (* ddd(void))(void)

리턴: int (*)(void)
이름: ddd
인자: void

int (*)(void) ddd(void)








void (* bbb(void (*p)(void)))(void)

리턴: void (*)(void)
이름: bbb
인자: void (*)(void)

void (*)(void) bbb(void (*p)(void))



int (* aaa(void))[2]
int (*)[2] aaa(void)

배열 2 개짜리 묶음의 주소를 반환하고
인자로 void 를 취하는 함수 aaa

int (*(* bbb(void))(void))[2]
int (*)[2](*)(void) bbb(void)

배열 2 개짜리 묶음의 주소를 반환하고
인자로 void 를 취하는 함수 포인터를 반환하며
인자로 void 를 취하는 함수 bbb

int (*(*(*p[][2])(void))(void))[2]
int (*)[2] (*)(void) bbb(void)
int (*)[2] (*)(void) (*)(void) p[][2]

배열 2 개짜리 묶음의 주소를 반환하고
인자로 void 를 취하는 함수 포인터를 반환하며
다시 인자로 void 를 취하는 함수 포인터를 배열형태로 가짐

http://cafe.naver.com/hestit/788
http://cafe.naver.com/hestit/1858 - 숙제

문제 3 개



* 함수 포인터를 도대체 왜 쓰는가 ?

1. 비동기 처리
2. HW 개발 관점에서 인터럽트
3. 시스템 콜(유일한 SW 인터럽트임)

여기서 인터럽트들(SW, HW)은
사실상 모두 비동기 동작에 해당한다.
결국 1 번(비동기 처리)가 핵심이라는 의미다.

그렇다면 비동기 처리라는 것은 무엇일까 ?

기본적으로 동기 처리라는 것은
송신하는쪽과 수신하는쪽이 쌍방 합의하에만 달성된다.
(휴대폰 전화 통화 등등)
반면 비동기 처리는 이메일, 카톡등의 메신저에 해당한다.
그래서 그냥 일단 던져 놓으면 상대방이 바쁠때는 못보겠지만
그다지 바쁘지 않은 상황이라면 메시지를 보고 답변을 줄 것이다.
이와 같이 언제 어떤 이벤트가 발생할지
알 수 없는 것들을 다루는 녀석이 바로 함수 포인터다.

사람이 이런데서는 임기응변을 잘 해야 하듯이
컴퓨터 관점에서 임기응변을
잘 하도록 만들어주는 것이 바로 함수 포인터다.
(결론: 비동기 처리 - 함수 포인터)