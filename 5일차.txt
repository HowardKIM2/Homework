1. 문제 은행 5 개 숙제 정답 공개
2. 재귀호출과 팩토리얼
3. 재귀호출 while 루프로 풀기
4. 배열 문법
5. 배열의 메모리 구조
6. sizeof 로 매우 큰 배열에서 길이값 추출하기
7. 77 GHz 차량용 레이더, 라이더에서 수십 GB 로 쌓이는 센서 정보
8. 메모리 구조상 배열에 차원이 없음을 입증
9. 다중 배열 개념과 행렬 활용
10. 벡터의 확장 개념과 텐서, 그리고 삼중 배열

arr[2][2][3] = {
		{{1, 2, 3}, {1, 2, 3}},
		{{1, 2, 3}, {1, 2, 3}}
	       };

11. 함수와 배열 연동하기
12. 포인터 변수의 의미와 기계어 분석과의 상관 관계
14. 포인터와 함수 연동
15. 이중 포인터(기계어와의 상관 관계)
16. 이중 포인터를 활용한 재귀호출 없는 자료 구조 구현 방법론
17. 포인터 배열과 배열 포인터의 차이점
18. 숙제(배운 내용 복습 + 문제 은행 + 이중 포인터 교환 예제 그림 그리기)

기계어를 알면 포인터, 배열, 변수등의
모든 것을 주소 관점에서 접근할 수 있어서 매우 쉬워짐



* Segmentation Fault 가 나는 이유 ?

우리가 기계어를 보면서 살펴봤던 주소값들이
사실은 전부 가짜 주소라고 말했었다.
이 주소값은 엄밀하게 가상 메모리 주소에 해당하고
운영체제의 Paging 메커니즘을 통해서
실제 물리 메모리의 주소로 변환된다.
(윈도우도 가상 메모리 개념을 베껴서 사용한다)
그렇다면 당연히 맥(유닉스)도 사용함을 알 수 있다.

가상 메모리는 리눅스의 경우
32 비트 버전과 64 비트 버전이 나뉜다.

32 비트 시스템은 2^32 = 4GB 의 가상 메모리 공간을 가짐
여기서 1:3 으로 1 을 커널이 3 을 유저가 가져간다.
1 은 시스템(HW, CPU, SW 각종 주요 자원들)에
관련된 중요한 함수 루틴과 정보들을 관리하게 된다.
3 은 사용자들이 사용하는 정보들로
문제가 생겨도 그다지 치명적이지 않은 정보들로 구성됨

64 비트 시스템은 1:1 로
2^63 승에 해당하는 가상메모리를 각각 가진다.
문제는 변수를 초기화하지 않았을 경우
가지게 되는 쓰레기값이 0xCCCCC...CCC 로 구성됨이다.

32 비트의 경우에도 1:3 경계인 0xC0000000 을 넘어가게됨
64 비트의 경우엔 시작이 C 이므로
이미 1:1 경계를 한참 넘어감

그러므로 접근하면 안되는 메모리 영역에 접근하였기에
엄밀하게는 Page Fault(물리 메모리 할당되지 않음) 가
발생하게 되고 원래는 Interrupt 가 발생해서
Kernel 이 Page Handler(페이지 제어기)가 동작해서
가상 메모리에 대한 Paging 처리를 해주고
실제 물리 메모리를 할당해주는데
문제는 이것이 User 쪽에서 들어온 요청이므로
Kernel 쪽에서 강제로 기각해버리면서
Segmentation Fault 가 발생하는 것이다.

실제 Kernel 쪽에서 들어온 요청일 경우에는
위의 메커니즘에 따라서 물리 메모리를 할당해주게 된다.



* 숙제

배운 내용 복습

- 문제 은행

http://cafe.naver.com/hestit/79

2, 5, 7, 8 제외

http://cafe.naver.com/hestit/104

2, 4 번만 푼다.

* 별도의 문제

삼각형의 넓이 구하는 문제

case 1) 밑변, 높이
case 2) 밑변, 밑변과 다른 변이 이루는 각도

2 가지 경우로 모두 구현해본다.
(삼각함수 복습합시다 ^^)

* 제공된 교재의 279 페이지 퀴즈들 풀어보기

2, 4 번 제외


















